/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
  void display7SEG(int n)
    {
    	switch (n)
    	{
    	case 0 :
    		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin, RESET);
    		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin, RESET);
    		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin, RESET);
    		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin, RESET);
    		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin, RESET);
    		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin, RESET);
    		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin, SET);
    	    break ;
    	case 1 :
    		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin, SET);
    		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin, RESET);
    		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin, RESET);
    		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin, SET);
    		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin, SET);
    		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin, SET);
    		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin, SET);
    	    break;
    	case 2 :
    		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin, RESET);
    		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin, RESET);
    		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin, SET);
    		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin, RESET);
    		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin, RESET);
    		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin, SET);
    		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin, RESET);
    	    break ;
    	case 3 :
    		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin, RESET);
    		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin, RESET);
    		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin, RESET);
    		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin, RESET);
    		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin, SET);
    		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin, SET);
    		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin, RESET);
    	    break ;
    	case 4 :
    		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin, SET);
    		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin, RESET);
    		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin, RESET);
    		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin, SET);
    		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin, SET);
    		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin, RESET);
    		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin, RESET);
    		break ;
    	case 5 :
    		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin, RESET);
    		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin, SET);
    		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin, RESET);
    		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin, RESET);
    		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin, SET);
    		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin, RESET);
    		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin, RESET);
    		break ;
    	case 6 :
    		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin, RESET);
    		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin, SET);
    		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin, RESET);
    		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin, RESET);
    		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin, RESET);
    		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin, RESET);
    		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin, RESET);
    	    break ;
    	case 7 :
    		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin, RESET);
    		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin, RESET);
    		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin, RESET);
    		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin, SET);
    		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin, SET);
    		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin, SET);
    		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin, SET);
    		break ;
    	case 8 :
    		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin, RESET);
    	    HAL_GPIO_WritePin(B_GPIO_Port,B_Pin, RESET);
    		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin, RESET);
    		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin, RESET);
    		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin, RESET);
    		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin, RESET);
    		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin, RESET);
    		break ;
    	case 9 :
    		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin, RESET);
    		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin, RESET);
    		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin, RESET);
    		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin, RESET);
    		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin, SET);
    		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin, RESET);
    		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin, RESET);
    		break ;

    	}
    }
  /* USER CODE END 2 */
  void display7SEG1(int n)
      {
      	switch (n)
      	{
      	case 0 :
      		HAL_GPIO_WritePin(A1_GPIO_Port,A1_Pin, RESET);
      		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
      		HAL_GPIO_WritePin(C1_GPIO_Port,C1_Pin, RESET);
      		HAL_GPIO_WritePin(D1_GPIO_Port,D1_Pin, RESET);
      		HAL_GPIO_WritePin(E1_GPIO_Port,E1_Pin, RESET);
      		HAL_GPIO_WritePin(F1_GPIO_Port,F1_Pin, RESET);
      		HAL_GPIO_WritePin(G1_GPIO_Port,G1_Pin, SET);
      	    break ;
      	case 1 :
      		HAL_GPIO_WritePin(A1_GPIO_Port,A1_Pin, SET);
      		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
      		HAL_GPIO_WritePin(C1_GPIO_Port,C1_Pin, RESET);
      		HAL_GPIO_WritePin(D1_GPIO_Port,D1_Pin, SET);
      		HAL_GPIO_WritePin(E1_GPIO_Port,E1_Pin, SET);
      		HAL_GPIO_WritePin(F1_GPIO_Port,F1_Pin, SET);
      		HAL_GPIO_WritePin(G1_GPIO_Port,G1_Pin, SET);
      	    break;
      	case 2 :
      		HAL_GPIO_WritePin(A1_GPIO_Port,A1_Pin, RESET);
      		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
      		HAL_GPIO_WritePin(C1_GPIO_Port,C1_Pin, SET);
      		HAL_GPIO_WritePin(D1_GPIO_Port,D1_Pin, RESET);
      		HAL_GPIO_WritePin(E1_GPIO_Port,E1_Pin, RESET);
      		HAL_GPIO_WritePin(F1_GPIO_Port,F1_Pin, SET);
      		HAL_GPIO_WritePin(G1_GPIO_Port,G1_Pin, RESET);
      	    break ;
      	case 3 :
      		HAL_GPIO_WritePin(A1_GPIO_Port,A1_Pin, RESET);
      		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
      		HAL_GPIO_WritePin(C1_GPIO_Port,C1_Pin, RESET);
      		HAL_GPIO_WritePin(D1_GPIO_Port,D1_Pin, RESET);
      		HAL_GPIO_WritePin(E1_GPIO_Port,E1_Pin, SET);
      		HAL_GPIO_WritePin(F1_GPIO_Port,F1_Pin, SET);
      		HAL_GPIO_WritePin(G1_GPIO_Port,G1_Pin, RESET);
      	    break ;
      	case 4 :
      		HAL_GPIO_WritePin(A1_GPIO_Port,A1_Pin, SET);
      		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
      		HAL_GPIO_WritePin(C1_GPIO_Port,C1_Pin, RESET);
      		HAL_GPIO_WritePin(D1_GPIO_Port,D1_Pin, SET);
      		HAL_GPIO_WritePin(E1_GPIO_Port,E1_Pin, SET);
      		HAL_GPIO_WritePin(F1_GPIO_Port,F1_Pin, RESET);
      		HAL_GPIO_WritePin(G1_GPIO_Port,G1_Pin, RESET);
      		break ;
      	case 5 :
      		HAL_GPIO_WritePin(A1_GPIO_Port,A1_Pin, RESET);
      		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, SET);
      		HAL_GPIO_WritePin(C1_GPIO_Port,C1_Pin, RESET);
      		HAL_GPIO_WritePin(D1_GPIO_Port,D1_Pin, RESET);
      		HAL_GPIO_WritePin(E1_GPIO_Port,E1_Pin, SET);
      		HAL_GPIO_WritePin(F1_GPIO_Port,F1_Pin, RESET);
      		HAL_GPIO_WritePin(G1_GPIO_Port,G1_Pin, RESET);
      		break ;
      	case 6 :
      		HAL_GPIO_WritePin(A1_GPIO_Port,A1_Pin, RESET);
      		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, SET);
      		HAL_GPIO_WritePin(C1_GPIO_Port,C1_Pin, RESET);
      		HAL_GPIO_WritePin(D1_GPIO_Port,D1_Pin, RESET);
      		HAL_GPIO_WritePin(E1_GPIO_Port,E1_Pin, RESET);
      		HAL_GPIO_WritePin(F1_GPIO_Port,F1_Pin, RESET);
      		HAL_GPIO_WritePin(G1_GPIO_Port,G1_Pin, RESET);
      	    break ;
      	case 7 :
      		HAL_GPIO_WritePin(A1_GPIO_Port,A1_Pin, RESET);
      		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
      		HAL_GPIO_WritePin(C1_GPIO_Port,C1_Pin, RESET);
      		HAL_GPIO_WritePin(D1_GPIO_Port,D1_Pin, SET);
      		HAL_GPIO_WritePin(E1_GPIO_Port,E1_Pin, SET);
      		HAL_GPIO_WritePin(F1_GPIO_Port,F1_Pin, SET);
      		HAL_GPIO_WritePin(G1_GPIO_Port,G1_Pin, SET);
      		break ;
      	case 8 :
      		HAL_GPIO_WritePin(A1_GPIO_Port,A1_Pin, RESET);
      	    HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
      		HAL_GPIO_WritePin(C1_GPIO_Port,C1_Pin, RESET);
      		HAL_GPIO_WritePin(D1_GPIO_Port,D1_Pin, RESET);
      		HAL_GPIO_WritePin(E1_GPIO_Port,E1_Pin, RESET);
      		HAL_GPIO_WritePin(F1_GPIO_Port,F1_Pin, RESET);
      		HAL_GPIO_WritePin(G1_GPIO_Port,G1_Pin, RESET);
      		break ;
      	case 9 :
      		HAL_GPIO_WritePin(A1_GPIO_Port,A1_Pin, RESET);
      		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
      		HAL_GPIO_WritePin(C1_GPIO_Port,C1_Pin, RESET);
      		HAL_GPIO_WritePin(D1_GPIO_Port,D1_Pin, RESET);
      		HAL_GPIO_WritePin(E1_GPIO_Port,E1_Pin, SET);
      		HAL_GPIO_WritePin(F1_GPIO_Port,F1_Pin, RESET);
      		HAL_GPIO_WritePin(G1_GPIO_Port,G1_Pin, RESET);
      		break ;

      	}
      }
  void turnonTraffigLights(int n){
	switch (n) {
		case RED1_GREEN2:
			HAL_GPIO_WritePin(RED1_GPIO_Port,RED1_Pin, RESET);
			HAL_GPIO_WritePin(RED2_GPIO_Port,RED2_Pin, SET);
			HAL_GPIO_WritePin(GREEN1_GPIO_Port,GREEN1_Pin, SET);
			HAL_GPIO_WritePin(GREEN2_GPIO_Port,GREEN2_Pin, RESET);
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port,YELLOW1_Pin, SET);
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port,YELLOW2_Pin, SET);
			break;

		case RED1_YELLOW2:
			HAL_GPIO_WritePin(RED1_GPIO_Port,RED1_Pin, RESET);
			HAL_GPIO_WritePin(RED2_GPIO_Port,RED2_Pin, SET);
			HAL_GPIO_WritePin(GREEN1_GPIO_Port,GREEN1_Pin, SET);
			HAL_GPIO_WritePin(GREEN2_GPIO_Port,GREEN2_Pin, SET);
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port,YELLOW1_Pin, SET);
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port,YELLOW2_Pin, RESET);
			break;

		case GREEN1_RED2:
			HAL_GPIO_WritePin(RED1_GPIO_Port,RED1_Pin, SET);
			HAL_GPIO_WritePin(RED2_GPIO_Port,RED2_Pin, RESET);
			HAL_GPIO_WritePin(GREEN1_GPIO_Port,GREEN1_Pin, RESET);
			HAL_GPIO_WritePin(GREEN2_GPIO_Port,GREEN2_Pin, SET);
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port,YELLOW1_Pin, SET);
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port,YELLOW2_Pin, SET);
			break;

		case YELLOW1_RED2:
			HAL_GPIO_WritePin(RED1_GPIO_Port,RED1_Pin, SET);
			HAL_GPIO_WritePin(RED2_GPIO_Port,RED2_Pin, RESET);
			HAL_GPIO_WritePin(GREEN1_GPIO_Port,GREEN1_Pin, SET);
			HAL_GPIO_WritePin(GREEN2_GPIO_Port,GREEN2_Pin, SET);
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port,YELLOW1_Pin, RESET);
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port,YELLOW2_Pin, SET);
			break;
	}
  };


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter = 3;
  int light = 5;
  int light1 = 3;
  int currentState = RED1_GREEN2;
  while (1)
  {
    /* USER CODE END WHILE */
	  display7SEG(light);
	  display7SEG1(light1);
	  switch (currentState){
	  	  case RED1_GREEN2:
	  		  turnonTraffigLights(currentState);
	  		  counter--;
	  		  light--;
	  		  light1--;
	  		  if (counter <= 0){
	  			  counter = 2;
	  			  light1 = 2;
	  			  currentState = RED1_YELLOW2;
	  		  }
	  		  break;

	  	  case RED1_YELLOW2:
			  turnonTraffigLights(currentState);
			  counter--;
			  light--;
			  light1--;
			  if (counter <= 0){
				  counter = 3;
				  light = 3;
				  light1 = 5;
				  currentState = GREEN1_RED2;
			  }
			  break;

	  	  case GREEN1_RED2:
			  turnonTraffigLights(currentState);
			  counter--;
			  light--;
			  light1--;
			  if (counter <= 0){
				  counter = 2;
				  light = 2;
				  currentState = YELLOW1_RED2;
			  }
			  break;

	  	  case YELLOW1_RED2:
			  turnonTraffigLights(currentState);
			  counter--;
			  light--;
			  light1--;
			  if (counter <= 0){
				  counter = 3;
				  light = 5;
				  light1 = 3;
				  currentState = RED1_GREEN2;
			  }
			  break;
	  }
	  HAL_Delay(1000);
  }
   /* USER CODE BEGIN 3 */


  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|RED2_Pin|GREEN1_Pin|GREEN2_Pin
                          |YELLOW1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|B1_Pin
                          |C1_Pin|D1_Pin|E1_Pin|F1_Pin
                          |G1_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin RED2_Pin GREEN1_Pin GREEN2_Pin
                           YELLOW1_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|RED2_Pin|GREEN1_Pin|GREEN2_Pin
                          |YELLOW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : YELLOW2_Pin */
  GPIO_InitStruct.Pin = YELLOW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(YELLOW2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : A_Pin B_Pin C_Pin B1_Pin
                           C1_Pin D1_Pin E1_Pin F1_Pin
                           G1_Pin D_Pin E_Pin F_Pin
                           G_Pin A1_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|B1_Pin
                          |C1_Pin|D1_Pin|E1_Pin|F1_Pin
                          |G1_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
